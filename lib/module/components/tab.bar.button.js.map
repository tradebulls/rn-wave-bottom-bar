{"version":3,"sources":["tab.bar.button.tsx"],"names":["AnimatedTouchable","Animated","createAnimatedComponent","TouchableOpacity","defaultSpringConfig","damping","mass","stiffness","BarButton","isFocused","options","onPress","onLongPress","inactiveTintColor","springConfig","Value","animationValueThreshold","spring","toValue","useNativeDriver","start","style","wrapper","tabBarAccessibilityLabel","tabBarTestID","unfocusedButton","opacity","transform","scale","interpolate","inputRange","outputRange","zIndex","tabBarIcon","focused","color","size","TabBarButton","activeTintColor","focusedButtonStyle","focusedButton","backgroundColor","translateY"],"mappings":"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","sourcesContent":["import React, { memo, useEffect, useState } from 'react';\nimport { Animated, StyleProp, TouchableOpacity, View } from 'react-native';\n\nimport { BottomTabNavigationOptions } from '@react-navigation/bottom-tabs';\n\nimport { style } from '../styles/tab.bar.button.styles';\n\nconst AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);\n\ninterface Props {\n  index: number;\n  isFocused: boolean;\n  onPress: () => void;\n  onLongPress: () => void;\n  options: BottomTabNavigationOptions;\n  inactiveTintColor?: string;\n  activeTintColor?: string;\n  springConfig?: Animated.SpringAnimationConfig;\n  focusedButtonStyle?: StyleProp<any>;\n}\n\nexport const defaultSpringConfig = {\n  damping: 30,\n  mass: 0.7,\n  stiffness: 250,\n};\n\nexport const BarButton: React.FC<Props> = memo(\n  ({\n    isFocused,\n    options,\n    onPress,\n    onLongPress,\n    inactiveTintColor,\n    springConfig,\n  }) => {\n    const [animationValueThreshold] = useState(new Animated.Value(0));\n\n    useEffect(() => {\n      Animated.spring(animationValueThreshold, {\n        toValue: isFocused ? 0 : 1,\n        ...(springConfig || defaultSpringConfig),\n        useNativeDriver: true,\n      }).start();\n    }, [isFocused, animationValueThreshold]);\n\n    return (\n      <View style={style.wrapper}>\n        <AnimatedTouchable\n          accessibilityRole=\"button\"\n          accessibilityLabel={options.tabBarAccessibilityLabel}\n          testID={options.tabBarTestID}\n          onPress={onPress}\n          style={[\n            style.unfocusedButton,\n            { opacity: animationValueThreshold },\n            {\n              transform: [\n                {\n                  scale: animationValueThreshold.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [0, 1],\n                  }),\n                },\n              ],\n            },\n          ]}\n          onLongPress={onLongPress}\n        >\n          <View style={{ zIndex: 12 }}>\n            {options.tabBarIcon && !isFocused ? (\n              options.tabBarIcon({\n                focused: isFocused,\n                color: inactiveTintColor || 'white',\n                size: 28,\n              })\n            ) : (\n              <View />\n            )}\n          </View>\n        </AnimatedTouchable>\n      </View>\n    );\n  }\n);\n\nexport const TabBarButton: React.FC<Props> = memo(\n  ({\n    isFocused,\n    options,\n    onPress,\n    onLongPress,\n    activeTintColor,\n    springConfig,\n    focusedButtonStyle,\n  }) => {\n    const [animationValueThreshold] = useState(new Animated.Value(0));\n\n    useEffect(() => {\n      Animated.spring(animationValueThreshold, {\n        toValue: isFocused ? 0 : 1,\n        ...(springConfig || defaultSpringConfig),\n        useNativeDriver: true,\n      }).start();\n    }, [isFocused, animationValueThreshold]);\n\n    return (\n      <View style={style.wrapper}>\n        <AnimatedTouchable\n          accessibilityRole=\"button\"\n          accessibilityComponentType=\"Button\"\n          accessibilityLabel={options.tabBarAccessibilityLabel}\n          testID={options.tabBarTestID}\n          onPress={onPress}\n          style={[\n            {\n              ...style.focusedButton,\n              backgroundColor: activeTintColor || 'white',\n              transform: [\n                {\n                  translateY: animationValueThreshold.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [-18, 100],\n                  }),\n                },\n              ],\n            },\n            isFocused ? focusedButtonStyle : {},\n          ]}\n          onLongPress={onLongPress}\n        >\n          {options.tabBarIcon\n            ? options.tabBarIcon({\n                focused: isFocused,\n                color: 'white',\n                size: 28,\n              })\n            : null}\n        </AnimatedTouchable>\n      </View>\n    );\n  }\n);\n\nexport default TabBarButton;\n"]}