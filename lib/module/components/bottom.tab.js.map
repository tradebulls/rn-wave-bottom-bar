{"version":3,"sources":["bottom.tab.tsx"],"names":["AnimatedSvg","Animated","createAnimatedComponent","Svg","tabWidth","defaultSpringConfig","damping","mass","stiffness","FabTabBar","state","descriptors","navigation","springConfig","bottomBarContainerStyle","focusedButtonStyle","console","log","width","Dimensions","get","height","setDimensions","bottom","d","TAB_BAR_HEIGHT","tabsWidthValue","React","useMemo","routes","length","tabsRealWidth","Value","index","animatedValueLength","offset","newValue","spring","toValue","useNativeDriver","start","animationValueThreshold","nativeEvent","layout","lHeight","lWidth","style","container","marginBottom","backgroundColor","Object","values","options","tabBarActiveBackgroundColor","bottomFill","fabButtonsContainer","map","route","key","isFocused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","navigate","name","onLongPress","tabBarActiveTintColor","tabBarInactiveTintColor","StyleSheet","absoluteFill","elevation","zIndex","color","transform","translateX"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Animated,\n  Dimensions,\n  StyleProp,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Path, Svg } from 'react-native-svg';\n\nimport { BottomTabBarProps } from '@react-navigation/bottom-tabs';\nimport { Route } from '@react-navigation/native';\n\nimport { style, TAB_BAR_HEIGHT } from '../styles/bottom.tab.styles';\nimport FabBarButton, { BarButton } from './tab.bar.button';\nimport { getTabShape } from './tab.shape';\n\nconst AnimatedSvg = Animated.createAnimatedComponent(Svg);\n\nconst tabWidth = 110;\n\nexport const defaultSpringConfig = {\n  damping: 30,\n  mass: 0.7,\n  stiffness: 250,\n};\n\ntype CustomProps = {\n  /**\n   * Custom spring animation config\n   */\n  springConfig?: Animated.SpringAnimationConfig;\n  /**\n   * Custom style for bar\n   */\n  bottomBarContainerStyle?: StyleProp<any>;\n  /**\n   * Adding additional style for the focused tab button, such as a shadow.\n   */\n  focusedButtonStyle?: StyleProp<any>;\n};\n\nexport const FabTabBar: React.FC<BottomTabBarProps & CustomProps> = ({\n  state,\n  descriptors,\n  navigation,\n  springConfig,\n  bottomBarContainerStyle,\n  focusedButtonStyle,\n}) => {\n  console.log({ state, descriptors });\n  const [{ width, height }, setDimensions] = useState({\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height,\n  });\n  const { bottom } = useSafeAreaInsets();\n  const d = getTabShape(width, height, tabWidth, TAB_BAR_HEIGHT);\n\n  const tabsWidthValue = React.useMemo(\n    () => width / state.routes.length,\n    [width, state.routes]\n  );\n  const tabsRealWidth = width / state.routes.length;\n\n  const [animatedValueLength] = useState(\n    new Animated.Value(-width + tabsWidthValue * state.index)\n  );\n\n  const offset =\n    tabsRealWidth < tabWidth\n      ? tabWidth - tabsRealWidth\n      : (tabsRealWidth - tabWidth) * -1;\n\n  useEffect(() => {\n    const newValue = -width + tabsWidthValue * state.index;\n\n    Animated.spring(animatedValueLength, {\n      toValue: newValue - offset / 2,\n      ...(springConfig || defaultSpringConfig),\n      useNativeDriver: true,\n    }).start();\n  }, [width, height, state, tabsWidthValue, offset, animatedValueLength]);\n\n  const [animationValueThreshold] = useState(new Animated.Value(0));\n\n  useEffect(() => {\n    Animated.spring(animationValueThreshold, {\n      toValue: state.index,\n      ...(springConfig || defaultSpringConfig),\n      useNativeDriver: true,\n    }).start();\n  }, [animationValueThreshold, state.index]);\n\n  return (\n    <View\n      onLayout={({\n        nativeEvent: {\n          layout: { height: lHeight, width: lWidth },\n        },\n      }) => {\n        setDimensions({ width: lWidth, height: lHeight });\n      }}\n      style={[\n        style.container,\n        {\n          marginBottom: bottom,\n          height: TAB_BAR_HEIGHT,\n        },\n        bottomBarContainerStyle,\n      ]}\n    >\n      {bottom > 0 && (\n        <View\n          style={[\n            {\n              height: bottom,\n              backgroundColor:\n                Object.values(descriptors)[state.index].options\n                  .tabBarActiveBackgroundColor,\n              bottom: bottom * -1,\n            },\n            style.bottomFill,\n          ]}\n        />\n      )}\n      <View style={style.fabButtonsContainer}>\n        {state.routes.map((route: Route<any>, index: number) => {\n          const { options } = descriptors[route.key];\n          const isFocused = state.index === index;\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!isFocused && !event.defaultPrevented) {\n              navigation.navigate(route.name);\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          return (\n            <FabBarButton\n              key={route.key}\n              options={options}\n              onPress={onPress}\n              onLongPress={onLongPress}\n              index={index}\n              isFocused={isFocused}\n              activeTintColor={options.tabBarActiveTintColor}\n              inactiveTintColor={options.tabBarInactiveTintColor}\n            />\n          );\n        })}\n      </View>\n      <View\n        style={[\n          StyleSheet.absoluteFill,\n          { elevation: 11, zIndex: 0, backgroundColor: 'transparent' },\n        ]}\n      >\n        <AnimatedSvg\n          width={width * 2.5}\n          height={height + bottom}\n          style={{\n            width: '100%',\n            backgroundColor: 'transparent',\n            color: 'transparent',\n            transform: [{ translateX: animatedValueLength }],\n          }}\n        >\n          <Path\n            d={d}\n            fill={\n              Object.values(descriptors)[state.index].options\n                .tabBarActiveBackgroundColor || '#FF5252'\n            }\n          />\n        </AnimatedSvg>\n      </View>\n      {state.routes.map((route: Route<any>, index: number) => {\n        const { options } = descriptors[route.key];\n        const isFocused = state.index === index;\n\n        const onPress = () => {\n          const event = navigation.emit({\n            type: 'tabPress',\n            target: route.key,\n            canPreventDefault: true,\n          });\n\n          if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name);\n          }\n        };\n\n        const onLongPress = () => {\n          navigation.emit({\n            type: 'tabLongPress',\n            target: route.key,\n          });\n        };\n\n        return (\n          <BarButton\n            focusedButtonStyle={focusedButtonStyle}\n            key={route.key}\n            options={options}\n            onPress={onPress}\n            onLongPress={onLongPress}\n            index={index}\n            isFocused={isFocused}\n            activeTintColor={options.tabBarActiveTintColor}\n            inactiveTintColor={options.tabBarInactiveTintColor}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nexport default FabTabBar;\n"]}