{"version":3,"sources":["tab.shape.ts"],"names":["getTabShape","width","height","tabWidth","tabHeight","left","shape","line","x","d","y","right","tab","curve","curveBasis"],"mappings":"yKAAA,uDAEO,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CACzBC,KADyB,CAEzBC,MAFyB,CAGzBC,QAHyB,CAIzBC,SAJyB,CAKtB,CACH,GAAMC,CAAAA,IAAI,CAAGC,KAAK,CACfC,IADU,GAEVC,CAFU,CAER,SAACC,CAAD,QAAiCA,CAAAA,CAAC,CAACD,CAAnC,EAFQ,EAGVE,CAHU,CAGR,SAACD,CAAD,QAAiCA,CAAAA,CAAC,CAACC,CAAnC,EAHQ,EAG8B,CACzC,CAAEF,CAAC,CAAE,CAAL,CAAQE,CAAC,CAAE,CAAX,CADyC,CAEzC,CAAEF,CAAC,CAAEP,KAAK,CAAGE,QAAb,CAAuBO,CAAC,CAAE,CAA1B,CAFyC,CAH9B,CAAb,CAQA,GAAMC,CAAAA,KAAK,CAAGL,KAAK,CAChBC,IADW,GAEXC,CAFW,CAET,SAACC,CAAD,QAAiCA,CAAAA,CAAC,CAACD,CAAnC,EAFS,EAGXE,CAHW,CAGT,SAACD,CAAD,QAAiCA,CAAAA,CAAC,CAACC,CAAnC,EAHS,EAG6B,CACzC,CAAEF,CAAC,CAAEP,KAAK,CAAGE,QAAb,CAAuBO,CAAC,CAAE,CAA1B,CADyC,CAEzC,CAAEF,CAAC,CAAEP,KAAK,CAAG,GAAb,CAAkBS,CAAC,CAAE,CAArB,CAFyC,CAGzC,CAAEF,CAAC,CAAEP,KAAK,CAAG,GAAb,CAAkBS,CAAC,CAAER,MAArB,CAHyC,CAIzC,CAAEM,CAAC,CAAE,CAAL,CAAQE,CAAC,CAAER,MAAM,CAAG,CAApB,CAJyC,CAKzC,CAAEM,CAAC,CAAE,CAAL,CAAQE,CAAC,CAAE,CAAX,CALyC,CAH7B,CAAd,CAWA,GAAME,CAAAA,GAAG,CAAGN,KAAK,CACdC,IADS,GAETC,CAFS,CAEP,SAACC,CAAD,QAAiCA,CAAAA,CAAC,CAACD,CAAnC,EAFO,EAGTE,CAHS,CAGP,SAACD,CAAD,QAAiCA,CAAAA,CAAC,CAACC,CAAnC,EAHO,EAITG,KAJS,CAIHP,KAAK,CAACQ,UAJH,EAIe,CACzB,CACEN,CAAC,CAAEP,KADL,CAEES,CAAC,CAAE,CAFL,CADyB,CAKzB,CAAEF,CAAC,CAAEP,KAAK,CAAG,EAAb,CAAiBS,CAAC,CAAE,CAApB,CALyB,CAMzB,CAAEF,CAAC,CAAEP,KAAK,CAAG,EAAb,CAAiBS,CAAC,CAAEN,SAAS,CAAG,EAAhC,CANyB,CAOzB,CAAEI,CAAC,CAAEP,KAAK,CAAGE,QAAR,CAAmB,EAAxB,CAA4BO,CAAC,CAAEN,SAAS,CAAG,EAA3C,CAPyB,CAQzB,CAAEI,CAAC,CAAEP,KAAK,CAAGE,QAAR,CAAmB,EAAxB,CAA4BO,CAAC,CAAE,CAA/B,CARyB,CASzB,CAAEF,CAAC,CAAEP,KAAK,CAAGE,QAAb,CAAuBO,CAAC,CAAE,CAA1B,CATyB,CAJf,CAAZ,CAgBA,GAAMD,CAAAA,CAAC,WAAMJ,IAAN,aAAcO,GAAd,aAAqBD,KAArB,CAAP,CAEA,MAAOF,CAAAA,CAAP,CACD,CA5CM,C","sourcesContent":["import * as shape from 'd3-shape';\n\nexport const getTabShape = (\n  width: number,\n  height: number,\n  tabWidth: number,\n  tabHeight: number,\n) => {\n  const left = shape\n    .line()\n    .x((d: { x: number; y: number }) => d.x)\n    .y((d: { x: number; y: number }) => d.y)([\n    { x: 0, y: 0 },\n    { x: width + tabWidth, y: 0 },\n  ]);\n\n  const right = shape\n    .line()\n    .x((d: { x: number; y: number }) => d.x)\n    .y((d: { x: number; y: number }) => d.y)([\n    { x: width + tabWidth, y: 0 },\n    { x: width * 2.1, y: 0 },\n    { x: width * 2.1, y: height },\n    { x: 0, y: height + 0 },\n    { x: 0, y: 0 },\n  ]);\n\n  const tab = shape\n    .line()\n    .x((d: { x: number; y: number }) => d.x)\n    .y((d: { x: number; y: number }) => d.y)\n    .curve(shape.curveBasis)([\n    {\n      x: width,\n      y: 0,\n    },\n    { x: width + 18, y: 6 },\n    { x: width + 25, y: tabHeight - 12 },\n    { x: width + tabWidth - 25, y: tabHeight - 12 },\n    { x: width + tabWidth - 18, y: 6 },\n    { x: width + tabWidth, y: 0 },\n  ]);\n\n  const d = `${left} ${tab} ${right}`;\n\n  return d;\n};\n"]}